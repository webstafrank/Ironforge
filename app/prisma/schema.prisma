// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== USER MANAGEMENT ====================

enum UserRole {
  USER
  AUTHOR
  EDITOR
  ADMIN
}

enum SubscriptionTier {
  FREE
  BASIC
  PREMIUM
  ELITE
}

model User {
  id                String            @id @default(cuid())
  name              String?
  username          String?           @unique
  email             String            @unique
  emailVerified     DateTime?
  password          String?
  bio               String?           @db.Text
  avatar            String?
  coverImage        String?
  role              UserRole          @default(USER)
  subscriptionTier  SubscriptionTier  @default(FREE)
  subscriptionEnds  DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Social links
  website           String?
  instagram         String?
  youtube           String?
  twitter           String?

  // Physical stats (for fitness tracking)
  height            Float?            // in cm
  weight            Float?            // in kg
  bodyFatPercentage Float?

  // Relations
  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  comments          Comment[]
  mediaUploads      Media[]
  podcasts          Podcast[]
  episodes          PodcastEpisode[]
  products          Product[]         // Products created by this user
  orders            Order[]           // Orders placed by this user
  reviews           Review[]
  workoutLogs       WorkoutLog[]
  savedWorkouts     SavedWorkout[]
  progressPhotos    ProgressPhoto[]
  notifications     Notification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ==================== CONTENT MANAGEMENT ====================

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?   @db.Text
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  posts       Post[]
  products    Product[]
  podcasts    Podcast[]
}

model Tag {
  id        String        @id @default(cuid())
  name      String        @unique
  slug      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  // Relations
  posts     PostTag[]
  products  ProductTag[]
  podcasts  PodcastTag[]
  episodes  EpisodeTag[]
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Post {
  id            String      @id @default(cuid())
  title         String
  slug          String      @unique
  excerpt       String?     @db.Text
  content       String      @db.Text
  status        PostStatus  @default(DRAFT)
  featuredImage String?
  readTime      Int?        // Estimated read time in minutes
  viewCount     Int         @default(0)
  publishedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  authorId      String
  author        User        @relation(fields: [authorId], references: [id])
  categoryId    String?
  category      Category?   @relation(fields: [categoryId], references: [id])
  tags          PostTag[]
  comments      Comment[]
  media         Media[]
  relatedPosts  PostRelation[] @relation("RelatedFrom")
  relatedTo     PostRelation[] @relation("RelatedTo")
  
  @@index([authorId])
  @@index([categoryId])
  @@index([status])
  @@index([publishedAt])
}

model PostTag {
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([postId, tagId])
}

model PostRelation {
  id            String @id @default(cuid())
  postId        String
  post          Post   @relation("RelatedFrom", fields: [postId], references: [id], onDelete: Cascade)
  relatedPostId String
  relatedPost   Post   @relation("RelatedTo", fields: [relatedPostId], references: [id], onDelete: Cascade)
  
  @@unique([postId, relatedPostId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  isApproved Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  
  @@index([postId])
  @@index([authorId])
}

// ==================== MEDIA MANAGEMENT ====================

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

model Media {
  id          String    @id @default(cuid())
  filename    String
  originalName String
  url         String
  type        MediaType
  mimeType    String
  size        Int       // Size in bytes
  width       Int?      // For images and videos
  height      Int?      // For images and videos
  duration    Int?      // For audio and video (in seconds)
  alt         String?   // Alt text for images
  title       String?
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  
  // Relations
  uploaderId  String
  uploader    User      @relation(fields: [uploaderId], references: [id])
  postId      String?
  post        Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  productId   String?
  product     Product?  @relation(fields: [productId], references: [id], onDelete: SetNull)
  episodeId   String?
  episode     PodcastEpisode? @relation(fields: [episodeId], references: [id], onDelete: SetNull)
  
  @@index([uploaderId])
  @@index([type])
}

// ==================== PODCAST SYSTEM ====================

model Podcast {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String    @db.Text
  coverImage  String
  rssUrl      String?
  websiteUrl  String?
  copyright   String?
  language    String    @default("en")
  explicit    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  episodes    PodcastEpisode[]
  tags        PodcastTag[]
  
  @@index([authorId])
}

model PodcastTag {
  podcastId String
  podcast   Podcast  @relation(fields: [podcastId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([podcastId, tagId])
}

model PodcastEpisode {
  id          String    @id @default(cuid())
  title       String
  slug        String
  description String    @db.Text
  audioUrl    String
  duration    Int       // Duration in seconds
  episodeNumber Int
  seasonNumber Int?
  publishedAt DateTime?
  explicit    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  podcastId   String
  podcast     Podcast   @relation(fields: [podcastId], references: [id], onDelete: Cascade)
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  tags        EpisodeTag[]
  media       Media[]
  
  @@unique([podcastId, slug])
  @@index([podcastId])
  @@index([authorId])
  @@index([publishedAt])
}

model EpisodeTag {
  episodeId String
  episode   PodcastEpisode @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([episodeId, tagId])
}

// ==================== E-COMMERCE SYSTEM ====================

enum ProductType {
  EBOOK
  VIDEO_COURSE
  WORKOUT_PLAN
  MEAL_PLAN
  COACHING
  PHYSICAL_PRODUCT
  SUBSCRIPTION
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  OUT_OF_STOCK
}

model Product {
  id            String        @id @default(cuid())
  title         String
  slug          String        @unique
  description   String        @db.Text
  shortDescription String?    @db.Text
  price         Decimal       @db.Decimal(10, 2)
  salePrice     Decimal?      @db.Decimal(10, 2)
  type          ProductType
  status        ProductStatus @default(DRAFT)
  featuredImage String?
  gallery       String[]      // Array of image URLs
  digitalUrl    String?       // URL for digital products
  downloadLimit Int?          // Number of times a digital product can be downloaded
  stock         Int?          // For physical products
  sku           String?       @unique // Stock keeping unit
  weight        Float?        // Weight in kg for physical products
  dimensions    String?       // Format: "length x width x height" in cm
  publishedAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  authorId      String
  author        User          @relation(fields: [authorId], references: [id])
  categoryId    String?
  category      Category?     @relation(fields: [categoryId], references: [id])
  tags          ProductTag[]
  media         Media[]
  orderItems    OrderItem[]
  reviews       Review[]
  
  // For workout plans
  difficulty    String?       // e.g., "Beginner", "Intermediate", "Advanced"
  duration      Int?          // Duration in weeks
  workoutsPerWeek Int?
  
  @@index([authorId])
  @@index([categoryId])
  @@index([type])
  @@index([status])
  @@index([publishedAt])
}

model ProductTag {
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([productId, tagId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  total         Decimal     @db.Decimal(10, 2)
  subtotal      Decimal     @db.Decimal(10, 2)
  tax           Decimal     @db.Decimal(10, 2)
  discount      Decimal     @db.Decimal(10, 2) @default(0)
  shipping      Decimal     @db.Decimal(10, 2) @default(0)
  status        OrderStatus @default(PENDING)
  paymentIntent String?     // Stripe payment intent ID
  paymentMethod String?
  notes         String?     @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
  billingAddress Address?   @relation("BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId String?  @unique
  shippingAddress Address?  @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String? @unique
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id          String   @id @default(cuid())
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  
  // Relations
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  
  @@index([orderId])
  @@index([productId])
}

model Address {
  id            String  @id @default(cuid())
  firstName     String
  lastName      String
  addressLine1  String
  addressLine2  String?
  city          String
  state         String
  postalCode    String
  country       String
  phone         String?
  
  // Relations
  billingOrder  Order?  @relation("BillingAddress")
  shippingOrder Order?  @relation("ShippingAddress")
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 stars
  title       String?
  content     String?  @db.Text
  isVerified  Boolean  @default(false)
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  @@unique([productId, userId]) // One review per product per user
  @@index([productId])
  @@index([userId])
}

// ==================== FITNESS TRACKING ====================

model WorkoutLog {
  id          String   @id @default(cuid())
  date        DateTime
  duration    Int      // Duration in minutes
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises   ExerciseLog[]
  
  @@index([userId])
  @@index([date])
}

model ExerciseLog {
  id          String   @id @default(cuid())
  exerciseName String
  sets         Int
  reps         Int?
  weight       Float?  // Weight in kg
  duration     Int?    // Duration in seconds (for cardio, etc.)
  notes        String? @db.Text
  
  // Relations
  workoutLogId String
  workoutLog   WorkoutLog @relation(fields: [workoutLogId], references: [id], onDelete: Cascade)
  
  @@index([workoutLogId])
}

model SavedWorkout {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model ProgressPhoto {
  id          String   @id @default(cuid())
  imageUrl    String
  date        DateTime
  weight      Float?   // Weight in kg
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([date])
}

// ==================== NOTIFICATIONS ====================

enum NotificationType {
  SYSTEM
  COMMENT
  ORDER
  PRODUCT
  SUBSCRIPTION
  WORKOUT
}

model Notification {
  id          String           @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false)
  link        String?          // Optional link to redirect when clicked
  createdAt   DateTime         @default(now())
  
  // Relations
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}


